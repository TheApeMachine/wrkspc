// Code generated by capnpc-go. DO NOT EDIT.

package spd

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Announce capnp.Client

// Announce_TypeID is the unique identifier for the type Announce.
const Announce_TypeID = 0xbc1ddd3abf94f58d

func (c Announce) Public(ctx context.Context, params func(Announce_public_Params) error) (Announce_public_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc1ddd3abf94f58d,
			MethodID:      0,
			InterfaceName: "spd/announce.capnp:Announce",
			MethodName:    "public",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Announce_public_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Announce_public_Results_Future{Future: ans.Future()}, release
}

func (c Announce) AddRef() Announce {
	return Announce(capnp.Client(c).AddRef())
}

func (c Announce) Release() {
	capnp.Client(c).Release()
}

func (c Announce) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Announce) DecodeFromPtr(p capnp.Ptr) Announce {
	return Announce(capnp.Client{}.DecodeFromPtr(p))
}

func (c Announce) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A Announce_Server is a Announce with a local implementation.
type Announce_Server interface {
	Public(context.Context, Announce_public) error
}

// Announce_NewServer creates a new Server from an implementation of Announce_Server.
func Announce_NewServer(s Announce_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Announce_Methods(nil, s), s, c)
}

// Announce_ServerToClient creates a new Client from an implementation of Announce_Server.
// The caller is responsible for calling Release on the returned Client.
func Announce_ServerToClient(s Announce_Server) Announce {
	return Announce(capnp.NewClient(Announce_NewServer(s)))
}

// Announce_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Announce_Methods(methods []server.Method, s Announce_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc1ddd3abf94f58d,
			MethodID:      0,
			InterfaceName: "spd/announce.capnp:Announce",
			MethodName:    "public",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Public(ctx, Announce_public{call})
		},
	})

	return methods
}

// Announce_public holds the state for a server call to Announce.public.
// See server.Call for documentation.
type Announce_public struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Announce_public) Args() Announce_public_Params {
	return Announce_public_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Announce_public) AllocResults() (Announce_public_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Announce_public_Results(r), err
}

// Announce_List is a list of Announce.
type Announce_List = capnp.CapList[Announce]

// NewAnnounce creates a new list of Announce.
func NewAnnounce_List(s *capnp.Segment, sz int32) (Announce_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Announce](l), err
}

type Announce_public_Params capnp.Struct

// Announce_public_Params_TypeID is the unique identifier for the type Announce_public_Params.
const Announce_public_Params_TypeID = 0x9a19f532b8ba6953

func NewAnnounce_public_Params(s *capnp.Segment) (Announce_public_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Announce_public_Params(st), err
}

func NewRootAnnounce_public_Params(s *capnp.Segment) (Announce_public_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Announce_public_Params(st), err
}

func ReadRootAnnounce_public_Params(msg *capnp.Message) (Announce_public_Params, error) {
	root, err := msg.Root()
	return Announce_public_Params(root.Struct()), err
}

func (s Announce_public_Params) String() string {
	str, _ := text.Marshal(0x9a19f532b8ba6953, capnp.Struct(s))
	return str
}

func (s Announce_public_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Announce_public_Params) DecodeFromPtr(p capnp.Ptr) Announce_public_Params {
	return Announce_public_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Announce_public_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Announce_public_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Announce_public_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Announce_public_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Announce_public_Params) Datagram() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Announce_public_Params) HasDatagram() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Announce_public_Params) SetDatagram(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Announce_public_Params_List is a list of Announce_public_Params.
type Announce_public_Params_List = capnp.StructList[Announce_public_Params]

// NewAnnounce_public_Params creates a new list of Announce_public_Params.
func NewAnnounce_public_Params_List(s *capnp.Segment, sz int32) (Announce_public_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Announce_public_Params](l), err
}

// Announce_public_Params_Future is a wrapper for a Announce_public_Params promised by a client call.
type Announce_public_Params_Future struct{ *capnp.Future }

func (p Announce_public_Params_Future) Struct() (Announce_public_Params, error) {
	s, err := p.Future.Struct()
	return Announce_public_Params(s), err
}

type Announce_public_Results capnp.Struct

// Announce_public_Results_TypeID is the unique identifier for the type Announce_public_Results.
const Announce_public_Results_TypeID = 0xaeae73216dd4323b

func NewAnnounce_public_Results(s *capnp.Segment) (Announce_public_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Announce_public_Results(st), err
}

func NewRootAnnounce_public_Results(s *capnp.Segment) (Announce_public_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Announce_public_Results(st), err
}

func ReadRootAnnounce_public_Results(msg *capnp.Message) (Announce_public_Results, error) {
	root, err := msg.Root()
	return Announce_public_Results(root.Struct()), err
}

func (s Announce_public_Results) String() string {
	str, _ := text.Marshal(0xaeae73216dd4323b, capnp.Struct(s))
	return str
}

func (s Announce_public_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Announce_public_Results) DecodeFromPtr(p capnp.Ptr) Announce_public_Results {
	return Announce_public_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Announce_public_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Announce_public_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Announce_public_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Announce_public_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Announce_public_Results) Crowd() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.DataList(p.List()), err
}

func (s Announce_public_Results) HasCrowd() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Announce_public_Results) SetCrowd(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCrowd sets the crowd field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Announce_public_Results) NewCrowd(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Announce_public_Results_List is a list of Announce_public_Results.
type Announce_public_Results_List = capnp.StructList[Announce_public_Results]

// NewAnnounce_public_Results creates a new list of Announce_public_Results.
func NewAnnounce_public_Results_List(s *capnp.Segment, sz int32) (Announce_public_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Announce_public_Results](l), err
}

// Announce_public_Results_Future is a wrapper for a Announce_public_Results promised by a client call.
type Announce_public_Results_Future struct{ *capnp.Future }

func (p Announce_public_Results_Future) Struct() (Announce_public_Results, error) {
	s, err := p.Future.Struct()
	return Announce_public_Results(s), err
}

const schema_f454c62f08bc504b = "x\xda\x8c\xd0\xb1J\xc3P\x18\xc5\xf1s\xeeML\x07" +
	"S\x0cwQh\x11\xa1\x8b \x16\xebV\x87\xd6IP" +
	"\x84\xdc\xea\xa2\xdb5-RhoB\xd3\xe2388" +
	"\x08v\xf1!:\xab\x14\xdc|\x02W\x17\x9f\xc1\xce\x91" +
	"F\x94\xea\xe4\xf8\xc1\x9f\xdf\x07ge\xdctv\xfcX" +
	"@\xe8\x92\xbb\x94\x9dt\x9f\x1ej\xb3\xb5{\x04%\x02" +
	".=`\xb7\xcc\x16A\xb5\xc9\x06\x98\xed\xd5^\xfb\x1b" +
	"\xe9d\xb2\x18\x1c\xf3|\x1e\x9c\xe5\xc1\xcd\xec\xee\xb9\xfe" +
	"V\x9e\"P2;\x0a\xa7\x85\xea\xcb\xe9\x07@u\xcd" +
	"w5\x9e\xf7\xea\x96\x07\xea\x91\x1e\xb6\xb24iW\x8d" +
	"\xb5\xb13\xb2Qg;2\x89M\xea\xfb\xd6\xc6\xf9\x99" +
	"\x8c.z\xdd\xa8\x12\x9a\x81\xe93\xd5\x8et\x00\x87@" +
	"\xe0\x1f\x02zYR\xaf\x0afm34\x97\x03\xd3\x07" +
	"@\x1f\x82>\xf8/\xb6\xd5IG=9\xfc\xe5\xd6\x00" +
	"]\x90\xd4\x15\xc1\xf5h\x10_\xb5Y\x04C\xc9\x1c." +
	".\xc0\xe2/\xec\xd9\xa8\x13\x92\xda\x91.\xf0\xb3\"\xbf" +
	"\xd7\x0a\x82:D\xe0z\x8d\xaf\xe7M\x86\xe4g\x00\x00" +
	"\x00\xff\xff#\xe1b]"

func init() {
	schemas.Register(schema_f454c62f08bc504b,
		0x9a19f532b8ba6953,
		0xaeae73216dd4323b,
		0xbc1ddd3abf94f58d)
}
