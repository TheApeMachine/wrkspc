// Code generated by capnpc-go. DO NOT EDIT.

package spd

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Datagram capnp.Struct

// Datagram_TypeID is the unique identifier for the type Datagram.
const Datagram_TypeID = 0x9b4169eff5c9b6f0

func NewDatagram(s *capnp.Segment) (Datagram, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Datagram(st), err
}

func NewRootDatagram(s *capnp.Segment) (Datagram, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Datagram(st), err
}

func ReadRootDatagram(msg *capnp.Message) (Datagram, error) {
	root, err := msg.Root()
	return Datagram(root.Struct()), err
}

func (s Datagram) String() string {
	str, _ := text.Marshal(0x9b4169eff5c9b6f0, capnp.Struct(s))
	return str
}

func (s Datagram) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Datagram) DecodeFromPtr(p capnp.Ptr) Datagram {
	return Datagram(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Datagram) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Datagram) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Datagram) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Datagram) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Datagram) Uuid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return []byte(p.Data()), err
}

func (s Datagram) HasUuid() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Datagram) SetUuid(v []byte) error {
	return capnp.Struct(s).SetData(5, v)
}

func (s Datagram) Version() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Datagram) HasVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Datagram) SetVersion(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Datagram) Type() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return []byte(p.Data()), err
}

func (s Datagram) HasType() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Datagram) SetType(v []byte) error {
	return capnp.Struct(s).SetData(6, v)
}

func (s Datagram) Role() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Datagram) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Datagram) SetRole(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Datagram) Scope() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Datagram) HasScope() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Datagram) SetScope(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s Datagram) Identity() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s Datagram) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Datagram) SetIdentity(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

func (s Datagram) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Datagram) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Datagram) Layers() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.DataList(p.List()), err
}

func (s Datagram) HasLayers() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Datagram) SetLayers(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Datagram) NewLayers(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Datagram_List is a list of Datagram.
type Datagram_List = capnp.StructList[Datagram]

// NewDatagram creates a new list of Datagram.
func NewDatagram_List(s *capnp.Segment, sz int32) (Datagram_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7}, sz)
	return capnp.StructList[Datagram](l), err
}

// Datagram_Future is a wrapper for a Datagram promised by a client call.
type Datagram_Future struct{ *capnp.Future }

func (p Datagram_Future) Struct() (Datagram, error) {
	s, err := p.Future.Struct()
	return Datagram(s), err
}

const schema_85d3acc39d94e0f8 = "x\xdaD\x8d\xbbJ3A\x00\x85\xcf\x99\xd9\xd9\xfd\x8b" +
	"?\x97!\xd3k-(\xc42\x8d\x17\xac\xac2\xc9\x13" +
	",\xc9\"\x0b\xb9,\xbb\x1b!\x95\x95o`'\xbe\x81" +
	"\xb5\xad\xa2\x88\x04\x14\x14\x15\x14\"\xa4PH#\xa6\x11" +
	",\x84\x95\x88\xc6\xf2\xfb8\x9c\xafx\xb2\xea\x94s\xc7" +
	"\x84\xb0F\xb9\xd9\xe4h\xf0\xfe\x16\xae\xed\xc3\x16\xc8\xec" +
	"c\xb4wpvx\xbb\x0b\xe5y\x80>?\xd5W\x1e" +
	"P\x1e\\\x10\x8bY\xd3O\xfd\xad\xd8o\x8b\xa5\x86\x1f" +
	"u\xa2\xca\xc6\x0f\xa3J\xday\xe9\x90\x0e\x01}\xb3\x0e" +
	"\xd8KI\xfb \xa8%\x0d\xa7\xf2~\x01\xb0\xd7\x92v" +
	"(\xa8\x1da(\x00\xfd\xb8\x0c\xd8;I;\x12\xd4J" +
	"\x1aJ@?m\x02v(i\xc7\x82t\x0d\x1d@\xbf" +
	"\xd4\x00\xfb,i'\x82\xdas\x0c\x15\xa0_+\x80\x1d" +
	"K\xd6\x1d\x0a\x16\x95\xa1\x0b\x94\xc8i\xe8S\xb2\xfe\x8f" +
	"\x82Z\xb8\x86\x1ePRS]\xa3d\xfd?\x05w\xb6" +
	"\x838\x09\xbb\x1d\xe6 \x98\x03\x0bq\xb7\x15\xfc\xc2\\" +
	"\xd2\xe8F3\xca\xc2f\xd0I\xc3\xb4\x0f`\xe6\xd2\xb0" +
	"\x1d$\xa9\xdf\x06#*\x08*p\xa5\xe5\xf7\x838a" +
	"\x1e\xacJ~/\xf3`\xa1\xd7\x0b\x9b\xb3J\xda\xff\xfb" +
	"\xfd\x0a\x00\x00\xff\xff\xc3\x19P\xa3"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x9b4169eff5c9b6f0)
}
