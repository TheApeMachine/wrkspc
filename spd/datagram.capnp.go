// Code generated by capnpc-go. DO NOT EDIT.

package spd

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Datagram capnp.Struct

// Datagram_TypeID is the unique identifier for the type Datagram.
const Datagram_TypeID = 0x9b4169eff5c9b6f0

func NewDatagram(s *capnp.Segment) (Datagram, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Datagram(st), err
}

func NewRootDatagram(s *capnp.Segment) (Datagram, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Datagram(st), err
}

func ReadRootDatagram(msg *capnp.Message) (Datagram, error) {
	root, err := msg.Root()
	return Datagram(root.Struct()), err
}

func (s Datagram) String() string {
	str, _ := text.Marshal(0x9b4169eff5c9b6f0, capnp.Struct(s))
	return str
}

func (s Datagram) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Datagram) DecodeFromPtr(p capnp.Ptr) Datagram {
	return Datagram(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Datagram) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Datagram) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Datagram) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Datagram) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Datagram) Uuid() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s Datagram) HasUuid() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Datagram) UuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s Datagram) SetUuid(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s Datagram) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Datagram) HasVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Datagram) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Datagram) SetVersion(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Datagram) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Datagram) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Datagram) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Datagram) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Datagram) Scope() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Datagram) HasScope() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Datagram) ScopeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Datagram) SetScope(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Datagram) Identity() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Datagram) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Datagram) IdentityBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Datagram) SetIdentity(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Datagram) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Datagram) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Datagram) Layers() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.DataList(p.List()), err
}

func (s Datagram) HasLayers() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Datagram) SetLayers(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Datagram) NewLayers(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Datagram_List is a list of Datagram.
type Datagram_List = capnp.StructList[Datagram]

// NewDatagram creates a new list of Datagram.
func NewDatagram_List(s *capnp.Segment, sz int32) (Datagram_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Datagram](l), err
}

// Datagram_Future is a wrapper for a Datagram promised by a client call.
type Datagram_Future struct{ *capnp.Future }

func (p Datagram_Future) Struct() (Datagram, error) {
	s, err := p.Future.Struct()
	return Datagram(s), err
}

const schema_85d3acc39d94e0f8 = "x\xda<\x8d\xb1J#Q\x18\x85\xcf\xb9wf\xd2$" +
	"\x9b\\v\xca\x85\xed\x17v\x97l\x99fU\xac\xac\xf2" +
	"\xfb\x06\x97\xcc\x10\x062\xc903\x11RYY\xdb\xd8" +
	"\x89o`!\xa2\xa2\xa0\x18Q\xc1@,\x82>@\x10" +
	"\x04\x0bA\x1b\xc1n$E\xd2\x9d\xef\x83\xc3W;\\" +
	"r\xea\x95KB\x89\xefz\xc5\xfb\xc9\xe8\xe3-Z\xde" +
	"\x85|'\x8b\xcf\xe9\xce\xde\xf5\xfe\xc3\x16\\\xaf\x04\x98" +
	"\xdb'3)\x01\xf5\xfbm\xe2w\x91%\xc1\xdf\xc0\xe6" +
	"V\xb5S\x1b\xffi\xd9\xa4\x9b4Vmn\xdb\xa5\xd4" +
	"\xc6MR~h\x87t\x08\x98\xe3\x15@\x0e4\xe5\\" +
	"\xd1(\xfa\x9c\xc9\xb3_\x80\x1ci\xcaP\xd1h\xe5S" +
	"\x01\xe6\xe2\x1f \xa7\x9ar\xa3h\x1c\xedS\x03\xe6j" +
	"\x0d\x90\xa1\xa6\x8c\x15\xe9\xfat\x003Z\x07\xe4NS" +
	"\x1e\x15\x8d\xe7\xf8t\x013i\x002\xd6\x94\x17\xc5\x9a" +
	"\xeb\xd3\x03\xcc\xf3,3\xd5\x94W\xc5\xcd\x8d0\xcd\xa2" +
	"^\x97e(\x96\xc1j\xda\xeb\x84s\xf8\x99\xb5z\xc9" +
	"\x82\x8a(\x08\xbby\x94\x0f\x00,\\\x1e\xc5a\x96\xdb" +
	"\x18L\xe8B\xd1\x05\xffw\xec L3~\x03\x9b\x9a" +
	"\xac@\xcdf\xb5\xdf\x8f\x82\xf9\xed+\x00\x00\xff\xff9" +
	"\xd2O{"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x9b4169eff5c9b6f0)
}
