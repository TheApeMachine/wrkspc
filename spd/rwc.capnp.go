// Code generated by capnpc-go. DO NOT EDIT.

package spd

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type RWC capnp.Client

// RWC_TypeID is the unique identifier for the type RWC.
const RWC_TypeID = 0xe4886cc751ef500c

func (c RWC) Read(ctx context.Context, params func(RWC_read_Params) error) (RWC_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4886cc751ef500c,
			MethodID:      0,
			InterfaceName: "rwc.capnp:RWC",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RWC_read_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RWC_read_Results_Future{Future: ans.Future()}, release
}
func (c RWC) Write(ctx context.Context, params func(RWC_write_Params) error) (RWC_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4886cc751ef500c,
			MethodID:      1,
			InterfaceName: "rwc.capnp:RWC",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RWC_write_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RWC_write_Results_Future{Future: ans.Future()}, release
}

func (c RWC) AddRef() RWC {
	return RWC(capnp.Client(c).AddRef())
}

func (c RWC) Release() {
	capnp.Client(c).Release()
}

func (c RWC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RWC) DecodeFromPtr(p capnp.Ptr) RWC {
	return RWC(capnp.Client{}.DecodeFromPtr(p))
}

func (c RWC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A RWC_Server is a RWC with a local implementation.
type RWC_Server interface {
	Read(context.Context, RWC_read) error

	Write(context.Context, RWC_write) error
}

// RWC_NewServer creates a new Server from an implementation of RWC_Server.
func RWC_NewServer(s RWC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RWC_Methods(nil, s), s, c)
}

// RWC_ServerToClient creates a new Client from an implementation of RWC_Server.
// The caller is responsible for calling Release on the returned Client.
func RWC_ServerToClient(s RWC_Server) RWC {
	return RWC(capnp.NewClient(RWC_NewServer(s)))
}

// RWC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RWC_Methods(methods []server.Method, s RWC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4886cc751ef500c,
			MethodID:      0,
			InterfaceName: "rwc.capnp:RWC",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, RWC_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4886cc751ef500c,
			MethodID:      1,
			InterfaceName: "rwc.capnp:RWC",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, RWC_write{call})
		},
	})

	return methods
}

// RWC_read holds the state for a server call to RWC.read.
// See server.Call for documentation.
type RWC_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RWC_read) Args() RWC_read_Params {
	return RWC_read_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RWC_read) AllocResults() (RWC_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWC_read_Results(r), err
}

// RWC_write holds the state for a server call to RWC.write.
// See server.Call for documentation.
type RWC_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RWC_write) Args() RWC_write_Params {
	return RWC_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RWC_write) AllocResults() (RWC_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RWC_write_Results(r), err
}

// RWC_List is a list of RWC.
type RWC_List = capnp.CapList[RWC]

// NewRWC creates a new list of RWC.
func NewRWC_List(s *capnp.Segment, sz int32) (RWC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RWC](l), err
}

type RWC_read_Params capnp.Struct

// RWC_read_Params_TypeID is the unique identifier for the type RWC_read_Params.
const RWC_read_Params_TypeID = 0xfadd9f7984322d9a

func NewRWC_read_Params(s *capnp.Segment) (RWC_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RWC_read_Params(st), err
}

func NewRootRWC_read_Params(s *capnp.Segment) (RWC_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RWC_read_Params(st), err
}

func ReadRootRWC_read_Params(msg *capnp.Message) (RWC_read_Params, error) {
	root, err := msg.Root()
	return RWC_read_Params(root.Struct()), err
}

func (s RWC_read_Params) String() string {
	str, _ := text.Marshal(0xfadd9f7984322d9a, capnp.Struct(s))
	return str
}

func (s RWC_read_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RWC_read_Params) DecodeFromPtr(p capnp.Ptr) RWC_read_Params {
	return RWC_read_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RWC_read_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RWC_read_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RWC_read_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RWC_read_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RWC_read_Params_List is a list of RWC_read_Params.
type RWC_read_Params_List = capnp.StructList[RWC_read_Params]

// NewRWC_read_Params creates a new list of RWC_read_Params.
func NewRWC_read_Params_List(s *capnp.Segment, sz int32) (RWC_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RWC_read_Params](l), err
}

// RWC_read_Params_Future is a wrapper for a RWC_read_Params promised by a client call.
type RWC_read_Params_Future struct{ *capnp.Future }

func (p RWC_read_Params_Future) Struct() (RWC_read_Params, error) {
	s, err := p.Future.Struct()
	return RWC_read_Params(s), err
}

type RWC_read_Results capnp.Struct

// RWC_read_Results_TypeID is the unique identifier for the type RWC_read_Results.
const RWC_read_Results_TypeID = 0xed54beda30cc2a76

func NewRWC_read_Results(s *capnp.Segment) (RWC_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWC_read_Results(st), err
}

func NewRootRWC_read_Results(s *capnp.Segment) (RWC_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWC_read_Results(st), err
}

func ReadRootRWC_read_Results(msg *capnp.Message) (RWC_read_Results, error) {
	root, err := msg.Root()
	return RWC_read_Results(root.Struct()), err
}

func (s RWC_read_Results) String() string {
	str, _ := text.Marshal(0xed54beda30cc2a76, capnp.Struct(s))
	return str
}

func (s RWC_read_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RWC_read_Results) DecodeFromPtr(p capnp.Ptr) RWC_read_Results {
	return RWC_read_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RWC_read_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RWC_read_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RWC_read_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RWC_read_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RWC_read_Results) Out() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RWC_read_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RWC_read_Results) SetOut(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// RWC_read_Results_List is a list of RWC_read_Results.
type RWC_read_Results_List = capnp.StructList[RWC_read_Results]

// NewRWC_read_Results creates a new list of RWC_read_Results.
func NewRWC_read_Results_List(s *capnp.Segment, sz int32) (RWC_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RWC_read_Results](l), err
}

// RWC_read_Results_Future is a wrapper for a RWC_read_Results promised by a client call.
type RWC_read_Results_Future struct{ *capnp.Future }

func (p RWC_read_Results_Future) Struct() (RWC_read_Results, error) {
	s, err := p.Future.Struct()
	return RWC_read_Results(s), err
}

type RWC_write_Params capnp.Struct

// RWC_write_Params_TypeID is the unique identifier for the type RWC_write_Params.
const RWC_write_Params_TypeID = 0xa0d843b86bbcb414

func NewRWC_write_Params(s *capnp.Segment) (RWC_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWC_write_Params(st), err
}

func NewRootRWC_write_Params(s *capnp.Segment) (RWC_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWC_write_Params(st), err
}

func ReadRootRWC_write_Params(msg *capnp.Message) (RWC_write_Params, error) {
	root, err := msg.Root()
	return RWC_write_Params(root.Struct()), err
}

func (s RWC_write_Params) String() string {
	str, _ := text.Marshal(0xa0d843b86bbcb414, capnp.Struct(s))
	return str
}

func (s RWC_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RWC_write_Params) DecodeFromPtr(p capnp.Ptr) RWC_write_Params {
	return RWC_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RWC_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RWC_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RWC_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RWC_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RWC_write_Params) In() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RWC_write_Params) HasIn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RWC_write_Params) SetIn(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// RWC_write_Params_List is a list of RWC_write_Params.
type RWC_write_Params_List = capnp.StructList[RWC_write_Params]

// NewRWC_write_Params creates a new list of RWC_write_Params.
func NewRWC_write_Params_List(s *capnp.Segment, sz int32) (RWC_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RWC_write_Params](l), err
}

// RWC_write_Params_Future is a wrapper for a RWC_write_Params promised by a client call.
type RWC_write_Params_Future struct{ *capnp.Future }

func (p RWC_write_Params_Future) Struct() (RWC_write_Params, error) {
	s, err := p.Future.Struct()
	return RWC_write_Params(s), err
}

type RWC_write_Results capnp.Struct

// RWC_write_Results_TypeID is the unique identifier for the type RWC_write_Results.
const RWC_write_Results_TypeID = 0x9f5f31e9694db502

func NewRWC_write_Results(s *capnp.Segment) (RWC_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RWC_write_Results(st), err
}

func NewRootRWC_write_Results(s *capnp.Segment) (RWC_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RWC_write_Results(st), err
}

func ReadRootRWC_write_Results(msg *capnp.Message) (RWC_write_Results, error) {
	root, err := msg.Root()
	return RWC_write_Results(root.Struct()), err
}

func (s RWC_write_Results) String() string {
	str, _ := text.Marshal(0x9f5f31e9694db502, capnp.Struct(s))
	return str
}

func (s RWC_write_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RWC_write_Results) DecodeFromPtr(p capnp.Ptr) RWC_write_Results {
	return RWC_write_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RWC_write_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RWC_write_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RWC_write_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RWC_write_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RWC_write_Results_List is a list of RWC_write_Results.
type RWC_write_Results_List = capnp.StructList[RWC_write_Results]

// NewRWC_write_Results creates a new list of RWC_write_Results.
func NewRWC_write_Results_List(s *capnp.Segment, sz int32) (RWC_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RWC_write_Results](l), err
}

// RWC_write_Results_Future is a wrapper for a RWC_write_Results promised by a client call.
type RWC_write_Results_Future struct{ *capnp.Future }

func (p RWC_write_Results_Future) Struct() (RWC_write_Results, error) {
	s, err := p.Future.Struct()
	return RWC_write_Results(s), err
}

const schema_f454c62f08bc504b = "x\xda\x12\xd8\xe4\xc0b\xc8+\xcf\xcc\xc0\x14\xa8\xc2\xca" +
	"\xf6\x9fi\xabo\xe6K\xc3\xf8\xf9\x0c\x82|\x8c\x0c\x0c" +
	",\xec\x0c\x0c\xc2\xa5\x8c\x8f\x18X\xfe\x8bl\xd9\x93\xbd" +
	"\xc3\xf9\xc6\x02\x88\x04+#H&\x92\xf1\x16\x03\xa3p" +
	",\xa3=\x03\xe3\x7f\x9e\x80\xf7\x81\xc7s:\x9e0\x08" +
	"r1\xff\xf7\x0e\xd8\xc3\xa1\x7f,\xe4\x0b\x03\x03\xa3p" +
	"-c\x91p#Xy-c\xbb\xf0Y\x10\xeb\x7f\x99" +
	"\xd6\x19\x83[\xfbB\xde\"\x1b\xb6\x15l\xd8N\xb0a" +
	"\xb3t\x8dZ*\xe7\xdf\xfd\x85\xe4\x8a\x9b\x8c\x97\x18\x0c" +
	"\xfe\x17\x95'\xeb%'\x16\xe41\x15X\x05\x85;\xeb" +
	"\x95\x17e\x96\xa4\xaa\x04\xa5\x16\x97\xb2\xe7\x94\x14c\x97" +
	"\x0dH,Jd\xce-\x0edafa``ad" +
	"`\x10\xe4\x95b`\x08\xe4`f\x0c\x14abd\xce" +
	"\xccc\xe4e`b\xe4e`\x84kg\x90\x07\xeb\x0f" +
	"`d\x0c\xe4`fe`\x80;\x87\x11\xe6nAC" +
	"-\x06&AUvFFx\xb80\xc2BNP\xd2" +
	"\x88\x81I\x90\x97\x9d\xbf(51\xc5\x81Q\x1e\xec\x0a" +
	"\x07\xc6\x00FFt\xf7\x81\x14\x80\x1d\x9f\xc3\\\x82\xe2" +
	">%\x84\xfb\xd8\xf3KK0\x1c\x88\xac\x1f\xe4\xbd\\" +
	"\xc6b@\x00\x00\x00\xff\xff\x06\xfc{\xd3"

func init() {
	schemas.Register(schema_f454c62f08bc504b,
		0x9f5f31e9694db502,
		0xa0d843b86bbcb414,
		0xe4886cc751ef500c,
		0xed54beda30cc2a76,
		0xfadd9f7984322d9a)
}
