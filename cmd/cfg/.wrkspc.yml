program: wrkspc

wrkspc:
  # The current stage to run under.
  stage: local

  # Stage specific configurations.
  stages: {}

  # Configure the log levels.
  errnie:
    local: false # Defines if the tracer should also show traces from inside errnie.
    debug: false # Defines if errnie.Logs("some text").With(errnie.DEBUG) should print.
    trace: false # Defines the bahavior for errnie.Traces().

  # Configure various elements for the `run` command.
  run:
    pre: |
      # This is just a shell script.
    post: |
      # This is just a shell script.

  # Settings for S3 compatible storage, mostly used for data lake features in bcknd.
  nemo:
    access-key-id: <ACCESS KEY>
    access-key-secret: <ACCESS KEY SECRET>
    region: <REGION>
    bucket: <BUCKET>

  # Git repository settings.
  git:
    host: https://github.com
    username: <your username>
    token: <your personal acccess token> # You don't need this if your repo is not private.

    # Any dependencies you want to pull from git that additionally prepare a machine.
    dependencies: []

  # Configure Docker container settings.
  matrix:
    registry:
      username: <USERNAME>
      password: <PASSWORD>
      email: <EMAIL>
      host: docker.io

  # Configure Kubernetes settings.
  kube:
    config: ~/.kube/config
    distro:
      - metallb

  # To have fully atomic container build we need to write a rootfs to the container that is managed
  # under our own control. Match the correct root filesystem to the correct tool below.
  atomic:
    alpine-minirootfs-3.14.3-x86_64:
      - nmap
      - zsh
      - vim
      - term

  bcknd:
    port: 8008
    read-timeout: 10
    writeTimeout: 10

  # Configure the automatic cluster propagation. Using this feature
  # will automatically take over any machine you have access to on
  # the local network and provision it as a cluster node.
  contempt:
    keypairs: ["~/.ssh"] # List of locations with public and private keypairs.
    usernames: [] # List of username to try if keypairs did not work.
    passwords: [] # List of passwords to try for each username.

  # Configure lexical analyzer.
  # It is unlikely that you need this and it is currently not connected to the default functionality.
  lexer:
    # Any character the lexer should recognize as a delimitor in comma separated format.
    delimiters:
      - "[,]"
      - "::,::"
      - "(,)"
      - "{,}"

    # Known types you want to explicitely group under a certain type for the state model.
    # You can add to this arbitrarily, both values as categories.
    types:
      line-types:
        - logs
      service-types:
        - bcknd
      unit-types:
        - time
      log-types:
        - info
        - debug
      state-types:
        - failed
        - crashed
      action-types:
        - send
        - receive
      direction-types:
        - <=
        - =>
        - <=>

  # Configure simulator scenes.
  # It is unlikely that you need this and it is currently not connected to the default functionality.
  scenes:
    randomize-values:
      message: "randomizing values"
      arguments:
        strategy: "dice-roll"
    some-action:
      message: "some action"
    failure-rate:
      message: "applying failure rate"
      arguments:
        percentage: 10
    instance-bcknd:
      message: "instantiate bcknd"
      arguments:
        scope: global
    post-http:
      message: "pushing results"
      arguments:
        ingress: https://ingress.cluster.local/v1/secure

  # Configure simulator scenarios.
  scenarios:
    test:
      scenes:
        - randomize-values
        - failure-rate
        - instance-bcknd
        - post-http
