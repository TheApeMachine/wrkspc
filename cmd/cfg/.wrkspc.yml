program: wrkspc

# Configuration for the program.
wrkspc:
  # The current stage we are running the program under.
  stage: development

  # Stage specific configuration values.
  stages:
    # When stage is set to development, these values are used.
    development:
      fqdn: development.wrkspc.wrkgrp.org
      # Configures the way errnie behaves.
      # Setting local to true will result in errnie logging its internal methods.
      # Setting debug to true will result in errnie.Debugs(...) output.
      # Setting trace to true will result in errnie.Trace() output.
      errnie:
        local: false
        debug: true
        trace: true
        break: true

      metrics:
        pyroscope:
          endpoint: "http://localhost:4040"

      pxe:
        channel: http://stable.release.flatcar-linux.net/amd64-usr/current
        kernel: flatcar_production_pxe.vmlinuz
        image: flatcar_production_pxe_image.cpio.gz
        ignition: pxe-config.ign

        machines:
          deepthought:
            ip: 192.168.0.42
            port: 22
            username: <username>
            password: <password>

        # The butane config is given to a flatcar linux provisioning process
        # in order to make dynamic modifications during a PXE boot.
        butane:
          variant: flatcar
          version: 1.0.0
          storage:
            files:
              - path: /etc/docker/ca.crt
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    -----BEGIN CERTIFICATE-----
              - path: /etc/docker/tls.crt
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    -----BEGIN CERTIFICATE-----
              - path: /etc/docker/tls.key
                filesystem: root
                mode: 0644
                contents:
                  inline: |
                    -----BEGIN RSA PRIVATE KEY-----

          systemd:
            units:
              - name: docker-tls-tcp.socket
                enable: true
                contents: |
                  [Unit]
                  Description=Docker Secured Socket for the API

                  [Socket]
                  ListenStream=2376
                  BindIPv6Only=both
                  Service=docker.service

                  [Install]
                  WantedBy=sockets.target
              - name: docker.service
                enable: true
                dropins:
                  - name: 30-increase-ulimit.conf
                    contents: |
                      [Service]
                      LimitMEMLOCK=infinity
          networkd:
            units:
              - name: 00-eth0.network
                contents: |
                  [Match]
                  Name=eno1

                  [Network]
                  DNS=192.168.0.1
                  Address=192.168.0.10/24
                  Gateway=192.168.0.1
          docker:
            flags:
              - --tlsverify
              - --tlscacert=/etc/docker/ca.crt
              - --tlscert=/etc/docker/tls.crt
              - --tlskey=/etc/docker/tls.key
      # Configuration values for the service.
      server:
        port: "1984"

      # Configuration values for twoface.
      twoface:
        # Configuration values for worker pools.
        pool:
          # Set pool autoscaling value.
          # Use workers: 0 on the next configuration value to get autoscaling that
          # scales up from 0 and down to 0 when needed. Any other value for
          # the workers setting will result in a "floor" of that value for the
          # worker pool.
          autoscaling: true
          # Set the size of the worker pool (number of goroutines).
          # Possible values:
          #   - cores       (will use runtime.NumCPU())
          #   - threads     (will use runtime.NumCPU() * 2)
          #   - <n>         (where <n> is any integer)
          #   - cores*<n>   (will use runtime.NumCPU() * <n>)
          #   - threads*<n> (will use runtime.NumCPU() * <n>)
          workers: threads
          job:
            # The buffer value to use for the job channel.
            # This allows jobs to be queued and prevents job scheduling to be a
            # blocking operation when all workers are busy.
            buffer: 256

      s3:
        key: minioadmin
        secret: minioadmin
        region: us-east-2
        bucket: wrkspc
        endpoint: "http://127.0.0.1:9000"

    # When stage is set to test, these values are used.
    # NOTE: Running the tests will automatically set stage to this value.
    test:
      fqdn: test.wrkspc.wrkgrp.org

      # Configures the way errnie behaves.
      # Setting local to true will result in errnie logging its internal methods.
      # Setting debug to true will result in errnie.Debugs(...) output.
      # Setting trace to true will result in errnie.Trace() output.
      errnie:
        local: false
        debug: true
        trace: true
        break: false

      metrics:
        pyroscope:
          endpoint: "http://localhost:4040"

      # Configuration values for the service.
      server:
        port: "1984"

      # Configuration values for twoface.
      twoface:
        # Configuration values for worker pools.
        pool:
          # Set pool autoscaling value.
          # Use workers: 0 on the next configuration value to get autoscaling that
          # scales up from 0 and down to 0 when needed. Any other value for
          # the workers setting will result in a "floor" of that value for the
          # worker pool.
          autoscaling: true
          # Set the size of the worker pool (number of goroutines).
          # Possible values:
          #   - cores       (will use runtime.NumCPU())
          #   - threads     (will use runtime.NumCPU() * 2)
          #   - <n>         (where <n> is any integer)
          #   - cores*<n>   (will use runtime.NumCPU() * <n>)
          #   - threads*<n> (will use runtime.NumCPU() * <n>)
          workers: threads
          job:
            # The buffer value to use for the job channel.
            # This allows jobs to be queued and prevents job scheduling to be a
            # blocking operation when all workers are busy.
            buffer: 256

      s3:
        key: minioadmin
        secret: minioadmin
        region: us-east-2
        bucket: wrkspc
        endpoint: "http://127.0.0.1:9000"

    # When stage is set to production, these values are used.
    production:
      fqdn: production.wrkspc.wrkgrp.org

      # Configures the way errnie behaves.
      # Setting local to true will result in errnie logging its internal methods.
      # Setting debug to true will result in errnie.Debugs(...) output.
      # Setting trace to true will result in errnie.Trace() output.
      errnie:
        local: false
        debug: false
        trace: false
        break: false

      metrics:
        pyroscope:
          endpoint: "http://localhost:4040"

      # Configuration values for the service.
      server:
        port: "1984"

      # Configuration values for twoface.
      twoface:
        # Configuration values for worker pools.
        pool:
          # Set pool autoscaling value.
          # Use workers: 0 on the next configuration value to get autoscaling that
          # scales up from 0 and down to 0 when needed. Any other value for
          # the workers setting will result in a "floor" of that value for the
          # worker pool.
          autoscaling: true
          # Set the size of the worker pool (number of goroutines).
          # Possible values:
          #   - cores       (will use runtime.NumCPU())
          #   - threads     (will use runtime.NumCPU() * 2)
          #   - <n>         (where <n> is any integer)
          #   - cores*<n>   (will use runtime.NumCPU() * <n>)
          #   - threads*<n> (will use runtime.NumCPU() * <n>)
          workers: threads
          job:
            # The buffer value to use for the job channel.
            # This allows jobs to be queued and prevents job scheduling to be a
            # blocking operation when all workers are busy.
            buffer: 256

      s3:
        key: minioadmin
        secret: minioadmin
        region: us-east-2
        bucket: wrkspc
        endpoint: "http://127.0.0.1:9000"


  architectures:
    ingress:
      networking:
        directions:
          - incoming
        connections:
          - http
          - websocket
          - capnproto
      stores:
        - radix
        - minio
        - s3
