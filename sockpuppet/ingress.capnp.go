// Code generated by capnpc-go. DO NOT EDIT.

package sockpuppet

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Ingress capnp.Client

// Ingress_TypeID is the unique identifier for the type Ingress.
const Ingress_TypeID = 0xb071a3b18c310474

func (c Ingress) Handler(ctx context.Context, params func(Ingress_handler_Params) error) (Ingress_handler_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb071a3b18c310474,
			MethodID:      0,
			InterfaceName: "ingress.capnp:Ingress",
			MethodName:    "handler",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ingress_handler_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ingress_handler_Results_Future{Future: ans.Future()}, release
}

func (c Ingress) AddRef() Ingress {
	return Ingress(capnp.Client(c).AddRef())
}

func (c Ingress) Release() {
	capnp.Client(c).Release()
}

func (c Ingress) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ingress) DecodeFromPtr(p capnp.Ptr) Ingress {
	return Ingress(capnp.Client{}.DecodeFromPtr(p))
}

func (c Ingress) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A Ingress_Server is a Ingress with a local implementation.
type Ingress_Server interface {
	Handler(context.Context, Ingress_handler) error
}

// Ingress_NewServer creates a new Server from an implementation of Ingress_Server.
func Ingress_NewServer(s Ingress_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ingress_Methods(nil, s), s, c)
}

// Ingress_ServerToClient creates a new Client from an implementation of Ingress_Server.
// The caller is responsible for calling Release on the returned Client.
func Ingress_ServerToClient(s Ingress_Server) Ingress {
	return Ingress(capnp.NewClient(Ingress_NewServer(s)))
}

// Ingress_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ingress_Methods(methods []server.Method, s Ingress_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb071a3b18c310474,
			MethodID:      0,
			InterfaceName: "ingress.capnp:Ingress",
			MethodName:    "handler",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handler(ctx, Ingress_handler{call})
		},
	})

	return methods
}

// Ingress_handler holds the state for a server call to Ingress.handler.
// See server.Call for documentation.
type Ingress_handler struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ingress_handler) Args() Ingress_handler_Params {
	return Ingress_handler_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ingress_handler) AllocResults() (Ingress_handler_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ingress_handler_Results(r), err
}

// Ingress_List is a list of Ingress.
type Ingress_List = capnp.CapList[Ingress]

// NewIngress creates a new list of Ingress.
func NewIngress_List(s *capnp.Segment, sz int32) (Ingress_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ingress](l), err
}

type Ingress_handler_Params capnp.Struct

// Ingress_handler_Params_TypeID is the unique identifier for the type Ingress_handler_Params.
const Ingress_handler_Params_TypeID = 0x871bedb2ed0069bf

func NewIngress_handler_Params(s *capnp.Segment) (Ingress_handler_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ingress_handler_Params(st), err
}

func NewRootIngress_handler_Params(s *capnp.Segment) (Ingress_handler_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ingress_handler_Params(st), err
}

func ReadRootIngress_handler_Params(msg *capnp.Message) (Ingress_handler_Params, error) {
	root, err := msg.Root()
	return Ingress_handler_Params(root.Struct()), err
}

func (s Ingress_handler_Params) String() string {
	str, _ := text.Marshal(0x871bedb2ed0069bf, capnp.Struct(s))
	return str
}

func (s Ingress_handler_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ingress_handler_Params) DecodeFromPtr(p capnp.Ptr) Ingress_handler_Params {
	return Ingress_handler_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ingress_handler_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ingress_handler_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ingress_handler_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ingress_handler_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ingress_handler_Params) Datagram() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Ingress_handler_Params) HasDatagram() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ingress_handler_Params) SetDatagram(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Ingress_handler_Params_List is a list of Ingress_handler_Params.
type Ingress_handler_Params_List = capnp.StructList[Ingress_handler_Params]

// NewIngress_handler_Params creates a new list of Ingress_handler_Params.
func NewIngress_handler_Params_List(s *capnp.Segment, sz int32) (Ingress_handler_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ingress_handler_Params](l), err
}

// Ingress_handler_Params_Future is a wrapper for a Ingress_handler_Params promised by a client call.
type Ingress_handler_Params_Future struct{ *capnp.Future }

func (p Ingress_handler_Params_Future) Struct() (Ingress_handler_Params, error) {
	s, err := p.Future.Struct()
	return Ingress_handler_Params(s), err
}

type Ingress_handler_Results capnp.Struct

// Ingress_handler_Results_TypeID is the unique identifier for the type Ingress_handler_Results.
const Ingress_handler_Results_TypeID = 0x990e4dcf00c71206

func NewIngress_handler_Results(s *capnp.Segment) (Ingress_handler_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ingress_handler_Results(st), err
}

func NewRootIngress_handler_Results(s *capnp.Segment) (Ingress_handler_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ingress_handler_Results(st), err
}

func ReadRootIngress_handler_Results(msg *capnp.Message) (Ingress_handler_Results, error) {
	root, err := msg.Root()
	return Ingress_handler_Results(root.Struct()), err
}

func (s Ingress_handler_Results) String() string {
	str, _ := text.Marshal(0x990e4dcf00c71206, capnp.Struct(s))
	return str
}

func (s Ingress_handler_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ingress_handler_Results) DecodeFromPtr(p capnp.Ptr) Ingress_handler_Results {
	return Ingress_handler_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ingress_handler_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ingress_handler_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ingress_handler_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ingress_handler_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ingress_handler_Results) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Ingress_handler_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ingress_handler_Results) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Ingress_handler_Results_List is a list of Ingress_handler_Results.
type Ingress_handler_Results_List = capnp.StructList[Ingress_handler_Results]

// NewIngress_handler_Results creates a new list of Ingress_handler_Results.
func NewIngress_handler_Results_List(s *capnp.Segment, sz int32) (Ingress_handler_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ingress_handler_Results](l), err
}

// Ingress_handler_Results_Future is a wrapper for a Ingress_handler_Results promised by a client call.
type Ingress_handler_Results_Future struct{ *capnp.Future }

func (p Ingress_handler_Results_Future) Struct() (Ingress_handler_Results, error) {
	s, err := p.Future.Struct()
	return Ingress_handler_Results(s), err
}

const schema_f454c62f08bc504b = "x\xda\x12\xe8s`1\xe4\xcdgb`\x0a\x94ae" +
	"\xfb\xbd?\xf3\xed\xa6\xb7\xd2\xed\x82b\x8c\x0c\x0c\xac\x8c" +
	"\xec\x0c\x0c\xc6\xb2\x8cZ\x8c\x0c\x8c\xc2\xaa\x8c\xf6\x0c\x8c" +
	"\xdf\xd9\x84\x8e\x9f\xf7\xe5\x9b\x89$\xed\xc9h\x04\x92\x0e" +
	"\x04I\xff/a1\xec\xd9\xb8\xb8p\x03\x83 \x1f\xf3" +
	"\x7f\xef\x80=\x1c\xfa\xc7B\xbe000\x0a\x172n" +
	"\x12\xae\x04\xa9\x17.et\x17\x9e\xcb\xc8\xce\xa0\xf3?" +
	"3/\xbd(\xb5\xb8X\x8f99\xb1 \xaf\xc0\xca\x13" +
	"\xca\xcdH\xccK\xc9I-R\x09H\xe4/J\xcc-" +
	"\x0edafa``ad`\x10\xe4\xf5b`\x08" +
	"\xe4af\x0c\x94`b\xfc\x9f\x92X\x92\x98^\x94\x98" +
	"\xcb\xc0\xc0\xc0\xc8\xcb\xc0\xc4\xc8\xcb\xc0H\xc8\xc4\xa0T" +
	"\xf9\xe2\xd2\x9c\x12\x14#\xb5\x18\x18\x029\x98\x19\x03E" +
	"\x98\x18\xf9AFb\x98\xc5\x083K\x1e\xcc\x0f`d" +
	"\x0cdafe`\x80\x85\x14<H\x04\x9d\x18\x98\x04" +
	"Y\xd9\xeb\xa1\xb690\x0602\x02\x02\x00\x00\xff\xff" +
	"pCY\xc0"

func init() {
	schemas.Register(schema_f454c62f08bc504b,
		0x871bedb2ed0069bf,
		0x990e4dcf00c71206,
		0xb071a3b18c310474)
}
